{"version":3,"sources":["common/StoreContext/index.js","lib/useFetch.js","common/MainColumn/index.js","common/Label/index.js","common/InfoText/index.js","theme/index.js","pages/UsersList/UserCard/index.js","pages/UsersList/index.js","common/AsyncHandler/index.js","pages/UserDetails/RepositoriesTable.js","pages/UserDetails/index.js","theme/global.js","App.js","serviceWorker.js","index.js"],"names":["StoreContext","createContext","StoreProvider","_ref","children","_useState","useState","_useState2","Object","slicedToArray","state","setState","react_default","a","createElement","Provider","value","load","_ref2","url","stateUpdater","fetch","then","data","json","useFetch","key","store","useContext","loading","setLoading","_useState3","_useState4","setData","_useState5","_useState6","error","setError","useEffect","catch","MainColumn","styled","Box","_templateObject","theme","Label","Label_templateObject","palette","InfoText","InfoText_templateObject","objectSpread","defaultTheme","black","black10","text","text75","text50","text25","pageWidth","spacing","normal","small","fontWeight","regular","semibold","bold","StyledCard","Card","UserCard_templateObject","UserCard","_ref$user","user","id","avatar_url","login","es","Fit","as","Avatar","src","alt","width","height","marginRight","appTheme","flexDirection","justifyContent","alignItems","marginBottom","common_Label","common_InfoText","ReactRouterLink","to","concat","STORE_KEY","prevState","cachedData","first","some","it","defineProperty","newData","toConsumableArray","UsersList","setUrl","_useFetch","_data$slice","slice","last","common_MainColumn","fontSize","Fragment","columns","autoRows","gap","map","UsersList_UserCard","onClick","AsyncHandler","fetcher","RepositoriesTable","repositories","common_AsyncHandler","length","_ref3","name","html_url","href","rel","target","FieldRow","Flex","UserDetails_templateObject","UserDetails","params","match","_ref2$data","created_at","repos_url","Image","date","day","getDate","month","getMonth","year","getFullYear","formatDate","Date","UserDetails_RepositoriesTable","injectGlobal","global_templateObject","App","BrowserRouter","Route","path","exact","component","Component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7146058a.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\"\n\nconst StoreContext = createContext()\n\nfunction StoreProvider({ children }) {\n  let [state, setState] = useState({})\n\n  const load = ({ url, stateUpdater }) => {\n    return fetch(url)\n      .then(data => data.json())\n      .then(data => {\n        setState(stateUpdater(data))\n      })\n  }\n\n  return (\n    <StoreContext.Provider value={{ state, load }}>\n      {children}\n    </StoreContext.Provider>\n  )\n}\n\nexport { StoreProvider }\nexport default StoreContext\n","import { useState, useEffect, useContext } from \"react\"\nimport StoreContext from \"common/StoreContext\"\n\nexport default function useFetch({ url, key, stateUpdater }) {\n  const store = useContext(StoreContext)\n\n  let [loading, setLoading] = useState(true)\n  let [data, setData] = useState(store.state[key])\n  let [error, setError] = useState(null)\n\n  useEffect(\n    () => {\n      setLoading(true)\n      setError(null)\n      store.load({ url, stateUpdater }).catch(setError)\n    },\n    [url, key]\n  )\n\n  useEffect(\n    () => {\n      setData(store.state[key] || null)\n      setLoading(false)\n    },\n    [store.state[key]]\n  )\n\n  return { loading, data, error }\n}\n","import { styled, Box } from \"reakit\"\nimport { theme } from \"styled-tools\"\n\nconst MainColumn = styled(Box)`\n  max-width: ${theme(\"pageWidth\")};\n  margin: ${theme(\"spacing.normal\")} auto;\n  padding-left: ${theme(\"spacing.normal\")};\n  padding-right: ${theme(\"spacing.normal\")};\n`\n\nexport default MainColumn\n","import { styled, Box } from \"reakit\"\nimport { theme, palette } from \"styled-tools\"\n\nconst Label = styled(Box)`\n  color: ${palette(\"text75\")};\n  margin-right: 8px;\n  font-weight: ${theme(\"fontWeight.semibold\")};\n`\n\nexport default Label\n","import { styled, Box } from \"reakit\"\nimport { theme, palette } from \"styled-tools\"\n\nconst InfoText = styled(Box)`\n  font-weight: ${theme(\"fontWeight.bold\")};\n  color: ${palette(\"text\")};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`\n\nexport default InfoText\n","import defaultTheme from \"reakit-theme-default\"\n\nconst theme = {\n  ...defaultTheme,\n  palette: {\n    ...defaultTheme.palette,\n    black: \"#2C2C2C\",\n    black10: \"#e5e5e5\",\n    text: \"#2C2C2C\",\n    text75: \"#616161\",\n    text50: \"#959595\",\n    text25: \"#CACACA\",\n    error: \"#d32f2f\"\n  },\n  pageWidth: \"1200px\",\n  spacing: {\n    normal: \"1.6rem\",\n    small: \"0.8rem\"\n  },\n  fontWeight: {\n    regular: 400,\n    semibold: 600,\n    bold: 700\n  }\n}\n\nexport default theme\n","import React from \"react\"\nimport { styled, Card, Avatar, Flex, Link } from \"reakit\"\nimport { Link as ReactRouterLink } from \"react-router-dom\"\nimport { theme } from \"styled-tools\"\nimport Label from \"common/Label\"\nimport InfoText from \"common/InfoText\"\nimport appTheme from \"theme\"\n\nconst StyledCard = styled(Card)`\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n  border-radius: 3px;\n  padding: ${theme(\"spacing.small\")};\n`\nfunction UserCard({ user: { id, avatar_url, login } }) {\n  return (\n    <StyledCard>\n      <Flex>\n        <Card.Fit\n          as={Avatar}\n          src={avatar_url}\n          alt=\"Avatar\"\n          width={100}\n          height={100}\n          marginRight={appTheme.spacing.normal}\n        />\n        <Flex flexDirection=\"column\" justifyContent=\"center\">\n          <Flex alignItems=\"center\" marginBottom={appTheme.spacing.small}>\n            <Label>ID</Label>\n            <InfoText>{id}</InfoText>\n          </Flex>\n          <Flex alignItems=\"center\">\n            <Label>Login</Label>\n            <InfoText>{login}</InfoText>\n          </Flex>\n        </Flex>\n      </Flex>\n      <Link as={ReactRouterLink} to={`/users/${login}/details`}>\n        View details\n      </Link>\n    </StyledCard>\n  )\n}\n\nexport default UserCard\n","import React, { useState } from \"react\"\nimport { Grid, Flex, Box, Heading, Button } from \"reakit\"\nimport useFetch from \"lib/useFetch\"\nimport MainColumn from \"common/MainColumn\"\nimport UserCard from \"./UserCard\"\nimport appTheme from \"theme\"\n\nconst STORE_KEY = \"USERS\"\n\nconst stateUpdater = data => prevState => {\n  let cachedData = prevState[STORE_KEY] || []\n  //use cached data if there's\n  let first = data[0]\n  if (cachedData.some(it => it.id === first.id)) {\n    return { ...prevState, [STORE_KEY]: cachedData }\n  }\n\n  let newData = [...cachedData, ...data]\n  return { ...prevState, [STORE_KEY]: newData }\n}\n\nfunction UsersList() {\n  let [url, setUrl] = useState(\"//api.github.com/users\")\n  let { error, loading, data } = useFetch({ url, key: STORE_KEY, stateUpdater })\n\n  if (error) {\n    return <div>Error: {error}</div>\n  }\n\n  if (!data && loading) {\n    return <div>Loading...</div>\n  }\n\n  if (!data) {\n    return null\n  }\n\n  let [last] = data.slice(-1)\n  let loadMore = () => setUrl(`//api.github.com/users?since=${last.id}`)\n\n  return (\n    <MainColumn>\n      <Heading fontSize={36}>Github Users</Heading>\n      <>\n        <Box marginBottom={appTheme.spacing.normal}>\n          <Grid\n            columns=\"repeat( auto-fit, minmax(300px, 1fr) )\"\n            autoRows=\"auto\"\n            gap=\"10px\"\n          >\n            {data.map(user => {\n              return <UserCard key={user.id} user={user} />\n            })}\n          </Grid>\n        </Box>\n        <Flex justifyContent=\"center\">\n          <Button onClick={loadMore}>\n            {loading ? \"Loading...\" : \"Load more\"}\n          </Button>\n        </Flex>\n      </>\n    </MainColumn>\n  )\n}\n\nexport default UsersList\n","import React from \"react\"\n\nfunction AsyncHandler({ fetcher, children }) {\n  if (fetcher.error) {\n    return <div>Error: {fetcher.error}</div>\n  }\n\n  if (fetcher.loading) {\n    return <div>Loading...</div>\n  }\n\n  if (!fetcher.data) {\n    return null\n  }\n\n  return children(fetcher)\n}\n\nexport default AsyncHandler\n","import React from \"react\"\nimport { Block, Table, Link } from \"reakit\"\nimport AsyncHandler from \"common/AsyncHandler\"\nimport Label from \"common/Label\"\nimport useFetch from \"lib/useFetch\"\nimport appTheme from \"theme\"\n\nconst STORE_KEY = \"REPOS\"\n\nconst stateUpdater = data => prevState => {\n  return { ...prevState, [STORE_KEY]: data }\n}\n\nfunction RepositoriesTable({ url }) {\n  let repositories = useFetch({ url, key: STORE_KEY, stateUpdater })\n\n  return (\n    <AsyncHandler fetcher={repositories}>\n      {({ data }) => {\n        if (data.length) {\n          return (\n            <Block>\n              <Label marginBottom={appTheme.spacing.small}>Repositories</Label>\n              <Table>\n                <thead>\n                  <tr>\n                    <th>ID</th>\n                    <th>NAME</th>\n                    <th>URL</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {data.map(({ id, name, html_url }) => (\n                    <tr key={id}>\n                      <td>{id}</td>\n                      <td>{name}</td>\n                      <td>\n                        <Link\n                          href={html_url}\n                          rel=\"noopener noreferrer\"\n                          target=\"_blank\"\n                        >\n                          {html_url}\n                        </Link>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            </Block>\n          )\n        }\n\n        return <span>No repositories found.</span>\n      }}\n    </AsyncHandler>\n  )\n}\n\nexport default RepositoriesTable\n","import React from \"react\"\nimport { styled, Flex, Image, Heading, Card, Link } from \"reakit\"\nimport { theme } from \"styled-tools\"\nimport MainColumn from \"common/MainColumn\"\nimport AsyncHandler from \"common/AsyncHandler\"\nimport Label from \"common/Label\"\nimport InfoText from \"common/InfoText\"\nimport useFetch from \"lib/useFetch\"\nimport RepositoriesTable from \"./RepositoriesTable\"\n\nexport const FieldRow = styled(Flex)`\n  margin-bottom: ${theme(\"spacing.normal\")};\n`\n\nconst STORE_KEY = \"USER\"\n\nconst stateUpdater = data => prevState => {\n  return { ...prevState, [STORE_KEY]: data }\n}\n\nfunction UserDetails({ match: { params } }) {\n  let url = `//api.github.com/users/${params.login}`\n  let user = useFetch({ url, key: STORE_KEY, stateUpdater })\n\n  return (\n    <MainColumn>\n      <Heading fontSize={36}>User Details</Heading>\n      <AsyncHandler fetcher={user}>\n        {({ data: { avatar_url, id, html_url, created_at, repos_url } }) => (\n          <Flex flexDirection=\"column\">\n            <FieldRow>\n              <Card.Fit\n                as={Image}\n                src={avatar_url}\n                alt=\"User avatar\"\n                width={200}\n                height={200}\n              />\n            </FieldRow>\n            <FieldRow>\n              <Label>ID</Label>\n              <InfoText>{id}</InfoText>\n            </FieldRow>\n            <FieldRow>\n              <Label>Login</Label>\n              <InfoText>{params.login}</InfoText>\n            </FieldRow>\n            <FieldRow>\n              <Label>Create at</Label>\n              <InfoText>{formatDate(new Date(created_at))}</InfoText>\n            </FieldRow>\n            <FieldRow>\n              <Link href={html_url} rel=\"noopener noreferrer\" target=\"_blank\">\n                Github profile\n              </Link>\n            </FieldRow>\n            <RepositoriesTable url={repos_url} />\n          </Flex>\n        )}\n      </AsyncHandler>\n    </MainColumn>\n  )\n}\n\nfunction formatDate(date) {\n  let day = date.getDate()\n  let month = date.getMonth() + 1\n  let year = date.getFullYear()\n\n  return `${day}/${month}/${year}`\n}\n\nexport default UserDetails\n","import { injectGlobal } from \"reakit\"\n\ninjectGlobal`\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend, button,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed,\n  figure, figcaption, footer, header, hgroup,\n  main, menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n    background: none;\n    box-shadow: none;\n  }\n\n  article, aside, details, figcaption, figure,\n  footer, header, hgroup, main, menu, nav, section {\n    display: block;\n  }\n\n  *[hidden] {\n    display: none;\n  }\n\n  ol, ul {\n    list-style: none;\n  }\n\n  blockquote, q {\n    quotes: none;\n  }\n\n  blockquote::before, blockquote::after,\n  q::before, q::after {\n    content: '';\n    content: none;\n  }\n\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n\n  html {\n    font-size: 10px;\n  }\n\n  body {\n    font-family: 'Titillium Web', sans-serif;\n    font-size: 2rem;\n    line-height: 1;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n\n`\n","import React, { Component } from \"react\"\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport { Provider as ThemeProvider } from \"reakit\"\nimport { StoreProvider } from \"common/StoreContext\"\nimport UsersList from \"pages/UsersList\"\nimport UserDetails from \"pages/UserDetails\"\nimport theme from \"theme\"\nimport \"theme/global\"\n\nclass App extends Component {\n  render() {\n    return (\n      <StoreProvider>\n        <ThemeProvider theme={theme}>\n          <Router>\n            <>\n              <Route path=\"/users\" exact component={UsersList} />\n              <Route path=\"/users/:login/details\" component={UserDetails} />\n            </>\n          </Router>\n        </ThemeProvider>\n      </StoreProvider>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}